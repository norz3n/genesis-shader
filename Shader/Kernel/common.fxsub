// Cascade Sun Shadow Quality Settings
#if CASCADE_SUN_SHADOW_MAP_QUALITY == 1
#   define CASCADE_SUN_SHADOW_MAP_SIZE == 1024

#elif CASCADE_SUN_SHADOW_MAP_QUALITY == 2
#   define CASCADE_SUN_SHADOW_MAP_SIZE == 2048

#elif CASCADE_SUN_SHADOW_MAP_QUALITY == 3
#   define CASCADE_SUN_SHADOW_MAP_SIZE == 4096

#elif CASCADE_SUN_SHADOW_MAP_QUALITY == 4
#   define CASCADE_SUN_SHADOW_MAP_SIZE == 8192

#endif

// Cascade Sun Shadow Sample Settings
#if CASCADE_SUN_SHADOW_SAMPLE_QUALITY == 1
#	define CASCADE_SUN_SHADOW_POISSON_COUNT 16
#	define CASCADE_SUN_SHADOW_POISSON Poisson16
#	define CASCADE_SUN_SHADOW_BLUR_COUNT 4

#elif CASCADE_SUN_SHADOW_SAMPLE_QUALITY == 2
#	define CASCADE_SUN_SHADOW_POISSON_COUNT 32
#	define CASCADE_SUN_SHADOW_POISSON Poisson32
#	define CASCADE_SUN_SHADOW_BLUR_COUNT 4

#elif CASCADE_SUN_SHADOW_SAMPLE_QUALITY == 3
#	define CASCADE_SUN_SHADOW_POISSON_COUNT 64
#	define CASCADE_SUN_SHADOW_POISSON Poisson64
#	define CASCADE_SUN_SHADOW_BLUR_COUNT 4

#elif CASCADE_SUN_SHADOW_SAMPLE_QUALITY == 4
#	define CASCADE_SUN_SHADOW_PCSS 1
#	define CASCADE_SUN_SHADOW_BLOCKER_COUNT 16
#	define CASCADE_SUN_SHADOW_BLOCKER_POISSON Poisson16
#	define CASCADE_SUN_SHADOW_POISSON_COUNT 32
#	define CASCADE_SUN_SHADOW_POISSON Poisson32
#	define CASCADE_SUN_SHADOW_BLUR_COUNT 4

#elif CASCADE_SUN_SHADOW_SAMPLE_QUALITY == 5
#	define CASCADE_SUN_SHADOW_PCSS 1
#	define CASCADE_SUN_SHADOW_BLOCKER_COUNT 25
#	define CASCADE_SUN_SHADOW_BLOCKER_POISSON Poisson25
#	define CASCADE_SUN_SHADOW_POISSON_COUNT 32
#	define CASCADE_SUN_SHADOW_POISSON Poisson32
#	define CASCADE_SUN_SHADOW_BLUR_COUNT 4

#elif CASCADE_SUN_SHADOW_SAMPLE_QUALITY == 6
#	define CASCADE_SUN_SHADOW_PCSS 1
#	define CASCADE_SUN_SHADOW_BLOCKER_COUNT 32
#	define CASCADE_SUN_SHADOW_BLOCKER_POISSON Poisson32
#	define CASCADE_SUN_SHADOW_POISSON_COUNT 64
#	define CASCADE_SUN_SHADOW_POISSON Poisson64
#	define CASCADE_SUN_SHADOW_BLUR_COUNT 4

#endif

// Volumetric Light Settings
#if VOLUMETRIC_LIGHT_QUALITY == 0
#   define MULTI_VOLUMETRIC_LIGHT_SAMPLES 24

#elif VOLUMETRIC_LIGHT_QUALITY == 1
#   define MULTI_VOLUMETRIC_LIGHT_SAMPLES 48

#elif VOLUMETRIC_LIGHT_QUALITY == 2
#   define MULTI_VOLUMETRIC_LIGHT_SAMPLES 64

#elif VOLUMETRIC_LIGHT_QUALITY == 3
#   define MULTI_VOLUMETRIC_LIGHT_SAMPLES 84

#else
#   define MULTI_VOLUMETRIC_LIGHT_SAMPLES 24

#endif

// Volumetric Shadow Settings
#if VOLUMETRIC_SHADOW_QUALITY == 0
#   define FOG_SHADOW_MAP_SIZE 256

#elif VOLUMETRIC_SHADOW_QUALITY == 1
#   define FOG_SHADOW_MAP_SIZE 512

#elif VOLUMETRIC_SHADOW_QUALITY == 2
#   define FOG_SHADOW_MAP_SIZE 1024

#elif VOLUMETRIC_SHADOW_QUALITY == 3
#   define FOG_SHADOW_MAP_SIZE 2048

#else
#   define FOG_SHADOW_MAP_SIZE 256
#endif

// Shadow Map Quality
#if SHADOW_MAP_QUALITY == 1
#   define SHADOW_MAP_SIZE 1024

#elif SHADOW_MAP_QUALITY == 2
#   define SHADOW_MAP_SIZE 2048

#elif SHADOW_MAP_QUALITY == 3
#   define SHADOW_MAP_SIZE 4096

#elif SHADOW_MAP_QUALITY == 4
#   define SHADOW_MAP_SIZE 8192

#else
#   define SHADOW_MAP_SIZE 1024

#endif

#if SHADOW_MAP_SAMPLE_QUALITY == 1
#	define SHADOW_MAP_POISSON_COUNT 16
#	define SHADOW_MAP_POISSON Poisson16

#elif SHADOW_MAP_SAMPLE_QUALITY == 2
#	define SHADOW_MAP_POISSON_COUNT 32
#	define SHADOW_MAP_POISSON Poisson32

#elif SHADOW_MAP_SAMPLE_QUALITY == 3
#	define SHADOW_MAP_POISSON_COUNT 64
#	define SHADOW_MAP_POISSON Poisson64

#elif SHADOW_MAP_SAMPLE_QUALITY == 4
#	define SHADOW_MAP_PCSS 1
#	define SHADOW_MAP_BLOCKER_COUNT 16
#	define SHADOW_MAP_BLOCKER_POISSON Poisson16
#	define SHADOW_MAP_POISSON_COUNT 32
#	define SHADOW_MAP_POISSON Poisson32

#elif SHADOW_MAP_SAMPLE_QUALITY == 5
#	define SHADOW_MAP_PCSS 1
#	define SHADOW_MAP_BLOCKER_COUNT 25
#	define SHADOW_MAP_BLOCKER_POISSON Poisson25
#	define SHADOW_MAP_POISSON_COUNT 32
#	define SHADOW_MAP_POISSON Poisson32

#elif SHADOW_MAP_SAMPLE_QUALITY == 6
#	define SHADOW_MAP_PCSS 1
#	define SHADOW_MAP_BLOCKER_COUNT 25
#	define SHADOW_MAP_BLOCKER_POISSON Poisson25
#	define SHADOW_MAP_POISSON_COUNT 64
#	define SHADOW_MAP_POISSON Poisson64

#endif

// Time Elapsing
float time : TIME; // <bool SyncInEditMode=true;>
float elapsed : ELAPSEDTIME;

float2 MousePosition : MOUSEPOSITION; // Mouse Position

// Material View Matrix
float4x4 matWorld              : WORLD; // World Material

float4x4 matWorldInverse       : WORLDINVERSE; // World Material Inversed

float4x4 matWorldView          : WORLDVIEW; // World View Material

float4x4 matWorldViewProject   : WORLDVIEWPROJECTION; // World Material View Projection

float4x4 matView               : VIEW; // Material Viev

float4x4 matViewInverse        : VIEWINVERSE; // Material View Inverse

float4x4 matProject            : PROJECTION; // Material Projection

float4x4 matProjectInverse     : PROJECTIONINVERSE; // Material Inverse Projection

float4x4 matViewProject        : VIEWPROJECTION; // Material View Projection

float4x4 matViewProjectInverse : VIEWPROJECTIONINVERSE; // Material View Inversed Projection

// Camera Settiings
float3 CameraPosition  : POSITION<string Object = "Camera";>; // Camera position in World

float3 CameraDirection : DIRECTION<string Object = "Camera";>; // Camera direction in World

// Light Settings
float3 MainLightColor : SPECULAR< string Object = "Light";>; // Main Light Color

float3 MainLightDirection : DIRECTION< string Object = "Light";>; // Main Light in World

// Material Properties
float4 MaterialDiffuse  : DIFFUSE<string Object = "Geometry";>; // Diffuse Material

float3 MaterialAmbient  : AMBIENT<string Object = "Geometry";>; // Ambient Material

float3 MaterialSpecular : SPECULAR<string Object = "Geometry";>; // Specular Material

float3 MaterialToon     : TOONCOLOR; // Toon Material

float  MaterialPower    : SPECULARPOWER<string Object = "Geometry";>; // Specular Power

// Viewports
float2 ViewportSize : VIEWPORTPIXELSIZE; 

float3 AcsPosition : CONTROLOBJECT<string name = "(self)";>;

static float2 ViewportOffset  = 0.5 / ViewportSize;
static float2 ViewportOffset2 = 1.0 / ViewportSize;
static float  ViewportAspect  = ViewportSize.x / ViewportSize.y;

// Uniforms
uniform bool use_texture; // Using Texture

uniform bool use_subtexture; // Using Sub-Texture

uniform bool use_spheremap; // Using Sph-Map

uniform bool use_toon; // Using Toon-shading

uniform bool opadd;

// Calculation Camera "Field of View"
float GetCameraFov()
{
	// matProject._m11 = 1.0f / tan((aperture / 180 * 3.1415926) * 0.5f)
    return degrees(atan(1.0f / matProject._m11) * 2.0);
}

// Calculation Camera Focal Distance
float GetCameraFocalLength(float filmSize = 36.0f)
{
	return filmSize * matProject._m11 / 2.0f;
}